name: valgrind

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  valgrind:
    runs-on: ubuntu-latest
    container: ghcr.io/fenics/dolfinx/dev-env:current-mpich
    env:
      CC: cc
      CXX: c++
      PETSC_ARCH: linux-gnu-real64-32
      BUILD_TYPE: Debug
      CXX_FLAGS: "-Wall -Werror -g -pedantic -Ofast -march=native"
      PYTHONPATH: "/usr/local/dolfinx-${PETSC_TYPE}/lib/python3.12/dist-packages:/usr/local/lib"
      LD_LIBRARY_PATH: "/usr/local/petsc/${PETSC_ARCH}/lib/:/usr/local"
      DEB_PYTHON_INSTALL_LAYOUT: deb_system
      VALGRIND_FLAGS: "--suppressions=${{ github.workspace }}/.github/workflows/valgrind-python.supp --leak-check=full --show-leak-kinds=definite,indirect --errors-for-leak-kinds=definite,indirect --error-exitcode=1 --read-var-info=yes --track-origins=yes"
    steps:
      - uses: actions/checkout@v4

      - name: Load environment variables
        run: cat .github/workflows/.env >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y valgrind libgtest-dev

      - name: Install DOLFINx
        uses: jorgensd/actions/install-dolfinx@v0.4
        with:
          ufl-repository: ${{ env.REPOSITORY-UFL }}
          ufl: ${{ env.BRANCH-UFL }}
          basix-repository: ${{ env.REPOSITORY-BASIX }}
          basix: ${{ env.BRANCH-BASIX }}
          ffcx-repository: ${{ env.REPOSITORY-FFCX }}
          ffcx: ${{ env.BRANCH-FFCX }}
          dolfinx-repository: ${{ env.REPOSITORY-DOLFINX }}
          dolfinx: ${{ env.BRANCH-DOLFINX }}
          petsc_arch: ${{ env.PETSC_ARCH }}

      - name: Build (C++)
        working-directory: cpp/
        run: |
          cmake -G Ninja -B build -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_CXX_FLAGS="${CXX_FLAGS}"
          cmake --build build
          cmake --install build

      - name: Run valgrind on tests (C++)
        working-directory: cpp/build
        run: valgrind ${VALGRIND_FLAGS} ctest -V

      - name: Build demos (C++)
        working-directory: cpp/demo
        run: |
          cmake -G Ninja -B build -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_CXX_FLAGS="${CXX_FLAGS}"
          cmake --build build

      - name: Run valgrind on demos (C++)
        working-directory: cpp/demo/build
        run: valgrind ${VALGRIND_FLAGS} ./simple/demo_simple

      - name: Install (Python)
        working-directory: python
        run: >
          pip install .[test]
          --no-build-isolation
          --verbose
          --config-settings=cmake.build-type="${BUILD_TYPE}"
          --config-settings=cmake.define.CXX_FLAGS="${CXX_FLAGS}"

      - name: Run valgrind on tests (Python)
        run: PYTHONMALLOC=malloc valgrind ${VALGRIND_FLAGS} pytest python/test -v
